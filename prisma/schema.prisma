// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "postgresql"
  url                  = env("DATABASE_URL")
  shadowDatabaseUrl    = env("SHADOW_DATABASE_URL")
  referentialIntegrity = "foreignKeys"
}

enum Element {
  NONE
  PYRO
  GEO
  DENDRO
  CRYO
  ELECTRO
  ANEMO
  HYDRO
}

enum WeaponType {
  NONE
  SWORD
  CLAYMORE
  POLEARM
  BOW
  CATALYST
}

enum Party {
  ALLY
  ENEMY
}

enum SkillSlot {
  PRIMARY
  SECONDARY
  TERTIARY
  EXTRA
  SPECIAL
}

model Player {
  userId BigInt @id
  element Element?
  weaponType WeaponType?
  energy Int @default(0)
  learnedSkills PlayerLearnedSkill[] @relation()
  characters Character[] @relation()
  soloEncounterStates SoloEncounterState[] @relation()
}

model Character {
  id Int @id @default(autoincrement())
  name String @db.VarChar(255)
  isEnemy Boolean
  element Element
  weaponType WeaponType
  maxHp Int
  energy Int @default(0)
  learnedSkills CharacterLearnedSkill[] @relation()
  defaultStatusEffects Json // { statusEffectName_level: turnsLeft }
  ownerId BigInt?
  owner Player? @relation(fields: [ownerId], references: [userId], onDelete: Cascade)
  isDeployed Boolean
  encounters Encounter[] @relation()
  asAlly Ally[] @relation()
  asEnemy Enemy[] @relation()
}

model LearnedSkill {
  name String @id
  learnedByPlayers PlayerLearnedSkill[] @relation()
  learnedByCharacters CharacterLearnedSkill[] @relation()
}

model PlayerLearnedSkill {
  playerId BigInt
  player Player @relation(fields: [playerId], references: [userId])
  skillName String
  skill LearnedSkill @relation(fields: [skillName], references: [name])
  equippedIn SkillSlot?

  @@id(fields: [playerId, skillName])
}

model CharacterLearnedSkill {
  characterId Int
  character Character @relation(fields: [characterId], references: [id])
  skillName String
  skill LearnedSkill @relation(fields: [skillName], references: [name])
  equippedIn SkillSlot?

  @@id(fields: [characterId, skillName])
}

model Encounter {
  name String @id
  title String @db.VarChar(255)
  enemies Character[] @relation()
  soloStates SoloEncounterState[] @relation()
}

model SoloEncounterState {
  id Int @id @default(autoincrement())
  messageId BigInt? @unique
  encounterName String
  playerId BigInt
  startedAt DateTime @default(now())
  allyIDs Int[]
  enemyIDs Int[]
  isComplete Boolean @default(false)
  playerSkillCooldowns Json? @default("{}") // { skillName: turnsLeft }
  encounter Encounter @relation(fields: [encounterName], references: [name], onDelete: SetNull)
  player Player @relation(fields: [playerId], references: [userId], onDelete: Cascade)
  allies Ally[] @relation()
  enemies Enemy[] @relation()
}

model Ally {
  id Int @id @default(autoincrement())
  party Party @default(ALLY)
  characterId Int
  character Character @relation(fields: [characterId], references: [id])
  encounterStateId Int
  encounterState SoloEncounterState @relation(fields: [encounterStateId], references: [id])
  hp Int
  energy Int
  statusEffects Json? @default("{}") // { statusEffectName_level: turnsLeft }
  skillCooldowns Json? @default("{}") // { skillName: turnsLeft }
}

model Enemy {
  id Int @id @default(autoincrement())
  party Party @default(ENEMY)
  characterId Int
  character Character @relation(fields: [characterId], references: [id])
  encounterStateId Int
  encounterState SoloEncounterState @relation(fields: [encounterStateId], references: [id])
  hp Int
  energy Int
  statusEffects Json? @default("{}") // { statusEffectName_level: turnsLeft }
  skillCooldowns Json? @default("{}") // { skillName: turnsLeft }
}
